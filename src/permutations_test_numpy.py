
import numpy as np


def search_sequence_numpy(arr,seq):
    """ Find sequence in an array using NumPy only.

    Parameters
    ----------
    arr    : input 1D array
    seq    : input 1D array

    Output
    ------
    Output : 1D Array of indices in the input array that satisfy the
    matching of input sequence in the input array.
    In case of no match, empty list is returned.
    """

    # Store sizes of input array and sequence
    Na, Nseq = arr.size, seq.size

    # Range of sequence
    r_seq = np.arange(Nseq)

    # Create 2D array of sliding indices across entire length of input array.
    # Match up with the input sequence & get the matching starting indices.
    M = (arr[np.arange(Na-Nseq+1)[:,None] + r_seq] == seq).all(1)

    # Get the range of those indices as final output
    return M.any() > 0

    if M.any()>0:
        return np.where(np.convolve(M,np.ones((Nseq),dtype=int))>0)[0]
    else:
        return []         # No match found

N = 5

count = 0
flag_ok = False

observed = [[0,1,0,2],
[2,3],
[4,2,1,3],
[1,2,3],
[3,4,3],
[0,2,3,0]]
'''
observed = [[2, 3, 1, 4, 2, 3, 0, 3, 0, 3, 4, 0, 1, 2, 3],
[3, 1, 2, 3, 0, 3, 1, 4, 0, 2, 3, 1, 2, 1, 2],
[2, 0, 1, 2, 3, 0, 1, 2, 0, 3, 0, 4, 0, 3],
[1, 2, 0, 2, 3, 1, 2, 3, 4, 2, 3, 4, 0, 3, 0, 1], [2, 3, 1, 2, 3, 1, 2, 3, 4, 3, 0, 3, 1, 2, 3, 0, 1], [0, 4, 2, 3, 4, 1, 2, 3, 4, 1, 4, 0, 1, 0, 1], [2, 3, 1, 2, 3, 4, 3, 4, 0, 1, 2, 0, 2, 3, 4], [2, 1, 2, 3, 1, 2, 0, 2, 1, 0, 3, 0, 2, 3, 1], [3, 1, 2, 3, 1, 0, 1, 2, 1, 0, 4, 1, 4, 0, 3], [2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4, 2, 0, 4], [4, 1, 4, 1, 0, 1, 2, 3, 4, 2, 1, 2, 0, 1, 0, 3], [2, 0, 2, 0, 1, 4, 1, 4, 2, 3, 4, 3, 4, 0, 4, 2, 3], [2, 3, 4, 0, 2, 3, 1, 4, 2, 3, 0, 3, 0, 3, 4], [3, 4, 3, 4, 1, 4, 1, 0, 1, 4, 1, 4, 0, 2, 3], [0, 3, 1, 0, 2, 0, 1, 2, 0, 1, 0, 3, 0, 2, 3], [2, 3, 1, 0, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 0], [0, 1, 0, 3, 1, 0, 4, 2, 3, 0, 4, 3, 4, 3], [3, 1, 0, 1, 0, 1, 4, 0, 1, 2, 3, 4, 0, 4, 1, 4], [1, 2, 0, 1, 2, 1, 4, 0, 4, 1, 2, 3, 0, 2, 3, 4, 3], [0, 1, 2, 0, 2, 1, 0, 1, 4, 2, 3, 4, 0, 3, 4], [2, 0, 2, 1, 0, 1, 4, 0, 1, 0, 2, 0, 4, 0, 1], [1, 2, 0, 4, 0, 1, 0, 1, 0, 2, 3, 4, 0, 1, 2], [4, 1, 0, 4, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4], [1, 2, 3, 1, 0, 3, 1, 2, 3, 0, 1, 2, 3, 4], [3, 4, 0, 1, 0, 3, 4, 2, 0, 3, 0, 1, 2, 1, 2, 3], [2, 3, 0, 3, 4, 3, 0, 1, 2, 3, 1, 2, 1, 2, 0, 3, 0], [2, 3, 0, 3, 1, 0, 3, 0, 1, 2, 3, 0, 2, 0, 1], [3, 0, 3, 4, 1, 2, 3, 1, 2, 0, 4, 0, 1, 2, 3]]
'''
observed = [[2, 3, 1, 4, 2, 3, 0, 3, 0, 3, 4, 0, 1, 2, 3],
[3, 1, 2, 3, 0, 3, 1, 4, 0, 2, 3, 1, 2, 1, 2],
[2, 0, 1, 2, 3, 0, 1, 2, 0, 3, 0, 4, 0, 3],
[1, 2, 0, 2, 3, 1, 2, 3, 4, 2, 3, 4, 0, 3, 0, 1],
[2, 3, 1, 2, 3, 1, 2, 3, 4, 3, 0, 3, 1, 2, 3, 0, 1]
]
split_idx = []
count = 0
for sequence in observed[:-1]:
    count += len(sequence)
    split_idx.append(count)

tot_len = sum([len(x) for x in observed])
print(tot_len)

# c = np.setdiff1d(a,b)

while True:

    arr = np.random.randint(N, size=tot_len)

    arr2 = np.split(arr, split_idx)
    # print(arr2)

    count += 1
    #print(count)
    flag_no = False
    for a in arr2:
        for i in range(N):
            seq = np.array([i, i])
            if search_sequence_numpy(a, seq):
                flag_no = True
                break
        if flag_no:
            break

    if not flag_no:
        break
    '''
    if count > 10000000:
        break
    '''

print(arr2)







'''
[[2, 3, 1, 4, 2, 3, 0, 3, 0, 3, 4, 0, 1, 2, 3], [3, 1, 2, 3, 0, 3, 1, 4, 0, 2, 3, 1, 2, 1, 2], [2, 0, 1, 2, 3, 0, 1, 2, 0, 3, 0, 4, 0, 3], [1, 2, 0, 2, 3, 1, 2, 3, 4, 2, 3, 4, 0, 3, 0, 1], [2, 3, 1, 2, 3, 1, 2, 3, 4, 3, 0, 3, 1, 2, 3, 0, 1], [0, 4, 2, 3, 4, 1, 2, 3, 4, 1, 4, 0, 1, 0, 1], [2, 3, 1, 2, 3, 4, 3, 4, 0, 1, 2, 0, 2, 3, 4], [2, 1, 2, 3, 1, 2, 0, 2, 1, 0, 3, 0, 2, 3, 1], [3, 1, 2, 3, 1, 0, 1, 2, 1, 0, 4, 1, 4, 0, 3], [2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 4, 2, 0, 4], [4, 1, 4, 1, 0, 1, 2, 3, 4, 2, 1, 2, 0, 1, 0, 3], [2, 0, 2, 0, 1, 4, 1, 4, 2, 3, 4, 3, 4, 0, 4, 2, 3], [2, 3, 4, 0, 2, 3, 1, 4, 2, 3, 0, 3, 0, 3, 4], [3, 4, 3, 4, 1, 4, 1, 0, 1, 4, 1, 4, 0, 2, 3], [0, 3, 1, 0, 2, 0, 1, 2, 0, 1, 0, 3, 0, 2, 3], [2, 3, 1, 0, 2, 3, 4, 0, 1, 2, 3, 1, 2, 3, 0], [0, 1, 0, 3, 1, 0, 4, 2, 3, 0, 4, 3, 4, 3], [3, 1, 0, 1, 0, 1, 4, 0, 1, 2, 3, 4, 0, 4, 1, 4], [1, 2, 0, 1, 2, 1, 4, 0, 4, 1, 2, 3, 0, 2, 3, 4, 3], [0, 1, 2, 0, 2, 1, 0, 1, 4, 2, 3, 4, 0, 3, 4], [2, 0, 2, 1, 0, 1, 4, 0, 1, 0, 2, 0, 4, 0, 1], [1, 2, 0, 4, 0, 1, 0, 1, 0, 2, 3, 4, 0, 1, 2], [4, 1, 0, 4, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4], [1, 2, 3, 1, 0, 3, 1, 2, 3, 0, 1, 2, 3, 4], [3, 4, 0, 1, 0, 3, 4, 2, 0, 3, 0, 1, 2, 1, 2, 3], [2, 3, 0, 3, 4, 3, 0, 1, 2, 3, 1, 2, 1, 2, 0, 3, 0], [2, 3, 0, 3, 1, 0, 3, 0, 1, 2, 3, 0, 2, 0, 1], [3, 0, 3, 4, 1, 2, 3, 1, 2, 0, 4, 0, 1, 2, 3]]
'''
